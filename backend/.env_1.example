# .env
# Database
DB_HOST=localhost
DB_USER=chatbot
DB_PASSWORD=chatbot
DB_NAME=chatbot

# Ollama
OLLAMA_URL=http://localhost:11434
OLLAMA_MODEL=mistral

# JWT
SECRET_KEY=your-secret-key-here
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# config.py
import os
from dotenv import load_dotenv

load_dotenv()

class Config:
    # Database
    DB_HOST = os.getenv("DB_HOST", "localhost")
    DB_USER = os.getenv("DB_USER", "chatbot")
    DB_PASSWORD = os.getenv("DB_PASSWORD", "chatbot")
    DB_NAME = os.getenv("DB_NAME", "chatbot")
    
    # Ollama
    OLLAMA_URL = os.getenv("OLLAMA_URL", "http://localhost:11434")
    OLLAMA_MODEL = os.getenv("OLLAMA_MODEL", "mistral")
    
    # JWT
    SECRET_KEY = os.getenv("SECRET_KEY", "your-secret-key")
    ALGORITHM = os.getenv("ALGORITHM", "HS256")
    ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", "30"))
    
    @classmethod
    def get_database_url(cls):
        return f"mysql+pymysql://{cls.DB_USER}:{cls.DB_PASSWORD}@{cls.DB_HOST}/{cls.DB_NAME}"
    
    @classmethod
    def validate_ollama_config(cls):
        """Validate Ollama configuration"""
        import requests
        try:
            response = requests.get(f"{cls.OLLAMA_URL}/api/tags", timeout=5)
            if response.status_code == 200:
                models = [m['name'] for m in response.json().get('models', [])]
                if cls.OLLAMA_MODEL not in models and f"{cls.OLLAMA_MODEL}:latest" not in models:
                    print(f"WARNING: Model '{cls.OLLAMA_MODEL}' not found in Ollama")
                    print(f"Available models: {models}")
                    return False
                return True
        except Exception as e:
            print(f"ERROR: Cannot connect to Ollama at {cls.OLLAMA_URL}")
            print(f"Error: {e}")
            return False